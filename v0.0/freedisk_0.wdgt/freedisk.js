// This file was generated by Dashcode from Apple Inc.
// You may edit this file to customize your Dashboard widget.

//
// Function: load()
// Called by HTML body element's onload event when the widget is ready to start
//
function load()
{
    setupParts();
}

//
// Function: remove()
// Called when the widget has been removed from the Dashboard
//
function remove()
{
    // Stop any timers to prevent CPU usage
    // Remove any preferences as needed
    // widget.setPreferenceForKey(null, createInstancePreferenceKey("your-key"));
}

//
// Function: hide()
// Called when the widget has been hidden
//
function hide()
{
    // Stop any timers to prevent CPU usage
}

//
// Function: show()
// Called when the widget has been shown
//
function show()
{
    // Restart any timers that were stopped on hide
}

//
// Function: sync()
// Called when the widget has been synchronized with .Mac
//
function sync()
{
    // Retrieve any preference values that you need to be synchronized here
    // Use this for an instance key's value:
    // instancePreferenceValue = widget.preferenceForKey(null, createInstancePreferenceKey("your-key"));
    //
    // Or this for global key's value:
    // globalPreferenceValue = widget.preferenceForKey(null, "your-key");
}

//
// Function: showBack(event)
// Called when the info button is clicked to show the back of the widget
//
// event: onClick event from the info button
//
function showBack(event)
{
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToBack");
    }

    front.style.display = "none";
    back.style.display = "block";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

//
// Function: showFront(event)
// Called when the done button is clicked from the back of the widget
//
// event: onClick event from the done button
//
function showFront(event)
{
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToFront");
    }

    front.style.display="block";
    back.style.display="none";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

if (window.widget) {
    widget.onremove = remove;
    widget.onhide = hide;
    widget.onshow = show;
    widget.onsync = sync;
}


function rundf(event)
{
	var units = document.getElementById('units').value;
    var mntpt = document.getElementById('mntpt').value;
	
	if (! mntpt) {
        var command = "/bin/df -" + units;
	} else {
		var header = "/bin/df -" + units + " | grep -v %";	
		var command = "/bin/df -" + units + " | grep " + mntpt;
        var command = header + "\n" + command;
	}
		
    var obj = widget.system(command, null);
	var output = obj.outputString;
	
    document.getElementById('output').value = output;
	
	/*
    var field_lengths = [];
    field_lengths[0] = 14;
	field_lengths[1] = 5;
	field_lengths[2] = 5;
	field_lengths[3] = 5;
	field_lengths[4] = 3;
		
	var lines = [];
	lines = output.split("\n");
	
	var newlines = [];
	var fields = [];	
	var field = "";
	
//    document.getElementById('output').value = lines;
	
	for (var i=0; i<lines.length; i++) {
	    if (i == 0) {continue;}
	    fields[0] = lines[i].substring(0,14);
		fields[0] = myformat(fields[0], field_lengths[0]);
	    fields[1] = lines[i].substring(15,20);	
		fields[1] = myformat(fields[1], field_lengths[1]);		
	    fields[2] = lines[i].substring(22,27);	
		fields[2] = myformat(fields[2], field_lengths[2]);				
	    fields[3] = lines[i].substring(29,34);	
		fields[3] = myformat(fields[3], field_lengths[3]);			
	    fields[4] = lines[i].substring(37,41);	
		fields[4] = myformat(fields[4], field_lengths[4]);			
	    fields[5] = lines[i].substring(45);
		fields[5] = myformat(fields[5], field_lengths[5]);						
		newlines[i] = fields[0] + fields[1] + fields[2] + fields[3] + fields[4] + fields[5] + "\n";
	} 
	
//    document.getElementById('output').value = newlines;
*/

}

function myformat(text, use_length) {
    var length = text.length;
	
	for (var i=length; i<use_length; i++) {
	    text = text + " ";
	}
	
	
	return (text);
	
}

 function keyHandler(e)
 {
 	var pressedKey;
	pressedKey = e.keyCode;
	
 	if (pressedKey == 13) {
		rundf();
	}
 }
 document.onkeypress = keyHandler;

